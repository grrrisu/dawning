// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.MapData = (function() {
    function MapData() {
      this._getDataSet = bind(this._getDataSet, this);
      this.eachField = bind(this.eachField, this);
      this.setDataPosition = bind(this.setDataPosition, this);
      this.mapMovedTo = bind(this.mapMovedTo, this);
      this.getVegetation = bind(this.getVegetation, this);
      this.addDataSet = bind(this.addDataSet, this);
      this.isDataSetLoaded = bind(this.isDataSetLoaded, this);
      this.loadData = bind(this.loadData, this);
      this.removeData = bind(this.removeData, this);
      this.updateData = bind(this.updateData, this);
      this.currentView = bind(this.currentView, this);
      this.setupDataLoaded = bind(this.setupDataLoaded, this);
      this.setupData = bind(this.setupData, this);
      this.setDataDimensions = bind(this.setDataDimensions, this);
      this.initMap = bind(this.initMap, this);
      this.dataSets = [];
    }

    MapData.prototype.initMap = function(callback) {
      return Game.main.apiCaller.get('/spec/fixtures/init_map.json', (function(_this) {
        return function(data) {
          data = JSON.parse(data);
          console.log("hx " + data.headquarter.x + " hy " + data.headquarter.y);
          return callback(data);
        };
      })(this));
    };

    MapData.prototype.setDataDimensions = function(fieldWidth, fieldHeight) {
      this.dataWidth = Math.round(fieldWidth / 10);
      return this.dataHeight = Math.round(fieldHeight / 10);
    };

    MapData.prototype.setupData = function(callback) {
      this.dataLoadedCallback = callback;
      this.dataToLoad = (this.dataWidth + 2) * (this.dataHeight + 2);
      return this.loadData(this.setupDataLoaded);
    };

    MapData.prototype.setupDataLoaded = function() {
      this.dataToLoad -= 1;
      if (this.dataToLoad === 0) {
        return this.dataLoadedCallback();
      }
    };

    MapData.prototype.currentView = function() {
      return [[this.dataX - 10, this.dataX + (this.dataWidth + 1) * 10 - 1], [this.dataY - 10, this.dataY + (this.dataHeight + 1) * 10 - 1]];
    };

    MapData.prototype.updateData = function() {
      this.removeData();
      return this.loadData();
    };

    MapData.prototype.removeData = function() {
      return this.dataSets.remove((function(_this) {
        return function(dataSet) {
          return dataSet.x < _this.dataX - 10 || dataSet.x2 > _this.dataX + (_this.dataWidth + 1) * 10 || dataSet.y < _this.dataY - 10 || dataSet.y2 > _this.dataY + (_this.dataHeight + 1) * 10;
        };
      })(this));
    };

    MapData.prototype.loadData = function(callback) {
      var i, px, py, ref, results, x, y;
      results = [];
      for (x = i = -10, ref = this.dataWidth * 10; i <= ref; x = i += 10) {
        results.push((function() {
          var j, ref1, results1;
          results1 = [];
          for (y = j = -10, ref1 = this.dataHeight * 10; j <= ref1; y = j += 10) {
            px = x + this.dataX;
            py = y + this.dataY;
            if (!this.isDataSetLoaded(px, py)) {
              results1.push(Game.main.apiCaller.get("/spec/fixtures/map_" + px + "_" + py + ".json", (function(_this) {
                return function(data) {
                  _this.addDataSet(data);
                  if (callback != null) {
                    return callback();
                  }
                };
              })(this)));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    MapData.prototype.isDataSetLoaded = function(x, y) {
      return this.dataSets.any(function(dataSet) {
        return dataSet.x === x && dataSet.y === y;
      });
    };

    MapData.prototype.addDataSet = function(data) {
      data = JSON.parse(data);
      data['x2'] = data.x + data['view'][0].length - 1;
      data['y2'] = data.y + data['view'].length - 1;
      return this.dataSets.push(data);
    };

    MapData.prototype.getVegetation = function(rx, ry) {
      var field;
      field = this.getField(rx, ry);
      if (field != null) {
        return field.vegetation;
      }
    };

    MapData.prototype.mapMovedTo = function(rx, ry, callback) {
      var deltaX, deltaY;
      if (this.rx !== rx || this.ry !== ry) {
        deltaX = rx - this.rx;
        deltaY = ry - this.ry;
        this.setDataPosition(rx, ry);
        this.updateData();
        return callback(deltaX, deltaY);
      }
    };

    MapData.prototype.setDataPosition = function(rx, ry) {
      this.rx = rx;
      this.ry = ry;
      this.dataX = Math.round(this.rx / 10) * 10;
      return this.dataY = Math.round(this.ry / 10) * 10;
    };

    MapData.prototype.eachField = function(startX, endX, startY, endY, callback) {
      var i, ref, ref1, results, x, y;
      results = [];
      for (y = i = ref = startY, ref1 = endY; ref <= ref1 ? i < ref1 : i > ref1; y = ref <= ref1 ? ++i : --i) {
        results.push((function() {
          var j, ref2, ref3, results1;
          results1 = [];
          for (x = j = ref2 = startX, ref3 = endX; ref2 <= ref3 ? j < ref3 : j > ref3; x = ref2 <= ref3 ? ++j : --j) {
            results1.push(callback(this.rx + x, this.ry + y));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    MapData.prototype.getField = function(rx, ry) {
      var dataSet;
      dataSet = this._getDataSet(rx, ry);
      if (dataSet != null) {
        return dataSet['view'][ry - dataSet.y][rx - dataSet.x];
      } else {
        console.log("no data set for " + rx + ", " + ry);
        return null;
      }
    };

    MapData.prototype._getDataSet = function(rx, ry) {
      return this.dataSets.find(function(dataSet) {
        return dataSet.x <= rx && dataSet.x2 > rx && dataSet.y <= ry && dataSet.y2 > ry;
      });
    };

    return MapData;

  })();

}).call(this);
