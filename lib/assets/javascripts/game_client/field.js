// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.Field = (function() {
    function Field(rx, ry) {
      this.rx = rx;
      this.ry = ry;
      this.returnSprite = bind(this.returnSprite, this);
      this.remove_from_parent = bind(this.remove_from_parent, this);
      this.default_light = bind(this.default_light, this);
      this.lowlight = bind(this.lowlight, this);
      this.removePawnSprite = bind(this.removePawnSprite, this);
      this.setPawnSprite = bind(this.setPawnSprite, this);
      this.removeFaunaSprite = bind(this.removeFaunaSprite, this);
      this.setFaunaSprite = bind(this.setFaunaSprite, this);
      this.removeFloraSprite = bind(this.removeFloraSprite, this);
      this.setFloraSprite = bind(this.setFloraSprite, this);
      this.removeVegetationSprite = bind(this.removeVegetationSprite, this);
      this.setVegetationSprite = bind(this.setVegetationSprite, this);
      this.clear = bind(this.clear, this);
    }

    Field.prototype.clear = function(mapLayer) {
      if (this.floraSprite != null) {
        this.removeFloraSprite();
      }
      if (this.faunaSprite != null) {
        this.removeFaunaSprite();
      }
      if (this.pawnSprite != null) {
        this.removePawnSprite();
      }
      return this.removeVegetationSprite(mapLayer);
    };

    Field.prototype.setVegetationSprite = function(sprite) {
      return this.vegetationSprite = sprite;
    };

    Field.prototype.removeVegetationSprite = function(mapLayer) {
      mapLayer.layer.removeChild(this.vegetationSprite);
      this.returnSprite(this.vegetationSprite);
      return this.vegetationSprite = null;
    };

    Field.prototype.setFloraSprite = function(sprite) {
      return this.floraSprite = sprite;
    };

    Field.prototype.removeFloraSprite = function() {
      this.remove_from_parent(this.floraSprite);
      return this.floraSprite = null;
    };

    Field.prototype.setFaunaSprite = function(sprite) {
      return this.faunaSprite = sprite;
    };

    Field.prototype.removeFaunaSprite = function() {
      this.remove_from_parent(this.faunaSprite);
      return this.faunaSprite = null;
    };

    Field.prototype.setPawnSprite = function(sprite) {
      return this.pawnSprite = sprite;
    };

    Field.prototype.removePawnSprite = function() {
      this.remove_from_parent(this.pawnSprite);
      return this.pawnSprite = null;
    };

    Field.prototype.lowlight = function() {
      this.vegetationSprite.filters = [Game.main.stage.map.blur_filter];
      this.vegetationSprite.tint = 0x888888;
      if (this.floraSprite != null) {
        this.floraSprite.tint = 0x888888;
      }
      if (this.faunaSprite != null) {
        this.faunaSprite.tint = 0x888888;
      }
      if (this.pawnSprite != null) {
        return this.pawnSprite.tint = 0x888888;
      }
    };

    Field.prototype.default_light = function() {
      this.vegetationSprite.filters = null;
      this.vegetationSprite.tint = 0xFFFFFF;
      if (this.floraSprite != null) {
        this.floraSprite.tint = 0xFFFFFF;
      }
      if (this.faunaSprite != null) {
        this.faunaSprite.tint = 0xFFFFFF;
      }
      if (this.pawnSprite != null) {
        return this.pawnSprite.tint = 0xFFFFFF;
      }
    };

    Field.prototype.remove_from_parent = function(sprite) {
      sprite.parent.removeChild(sprite);
      return this.returnSprite(sprite);
    };

    Field.prototype.returnSprite = function(sprite) {
      return Game.main.assets.returnSprite(sprite);
    };

    return Field;

  })();

}).call(this);
