// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.Map = (function() {
    function Map(stage, options) {
      this.clearFields = bind(this.clearFields, this);
      this.zoom = bind(this.zoom, this);
      this.reset_lowlight = bind(this.reset_lowlight, this);
      this.lowlight_around = bind(this.lowlight_around, this);
      this.restrictToRadius = bind(this.restrictToRadius, this);
      this.withinRadius = bind(this.withinRadius, this);
      this.center = bind(this.center, this);
      this.mapMovedTo = bind(this.mapMovedTo, this);
      this.createField = bind(this.createField, this);
      this.getFieldAt = bind(this.getFieldAt, this);
      this.removeFields = bind(this.removeFields, this);
      this.createFields = bind(this.createFields, this);
      this.create = bind(this.create, this);
      this.toRelativePosition = bind(this.toRelativePosition, this);
      this.toCenterPosition = bind(this.toCenterPosition, this);
      this.centerToAbsolutePosition = bind(this.centerToAbsolutePosition, this);
      this.moveToCenter = bind(this.moveToCenter, this);
      this.clearCenter = bind(this.clearCenter, this);
      this.getCenter = bind(this.getCenter, this);
      this.setCenter = bind(this.setCenter, this);
      this.init = bind(this.init, this);
      this.setDimensions = bind(this.setDimensions, this);
      this.mapLayer = new Game.MapLayer(stage, this);
      this.drag_handler = new Game.MapDragHandler(this.mapLayer.layer, this);
      this.scaleController = new Game.ScaleController(this);
      this.data = new Game.MapData();
      this.fields = [];
      this.fieldSize = options['fieldSize'] + 1;
      this.viewportWidth = options['width'];
      this.viewportHeight = options['height'];
      this.scale = 1.0;
      this.setDimensions();
      this.blur_filter = new PIXI.filters.BlurFilter();
      this.blur_filter.blur = 15;
    }

    Map.prototype.setDimensions = function() {
      this.fieldWidth = Math.floor(this.viewportWidth / (this.fieldSize * this.scale)) + 2;
      this.fieldHeight = Math.floor(this.viewportHeight / (this.fieldSize * this.scale)) + 2;
      return this.data.setDataDimensions(this.fieldWidth, this.fieldHeight);
    };

    Map.prototype.init = function(callback) {
      this.mapLayer.init();
      return this.data.initMap((function(_this) {
        return function(initData) {
          _this.setCenter(initData.headquarter.x, initData.headquarter.y);
          _this.moveToCenter(initData.headquarter.x, initData.headquarter.y);
          return _this.data.setupData(function() {
            return callback(initData);
          });
        };
      })(this));
    };

    Map.prototype.setCenter = function(centerX, centerY) {
      this.centerX = centerX;
      return this.centerY = centerY;
    };

    Map.prototype.getCenter = function() {
      var center;
      if ((this.centerX != null) && this.centerY) {
        return [this.centerX, this.centerY];
      } else {
        center = this.toCenterPosition();
        this.setCenter(center[0], center[1]);
        return [center[0], center[1]];
      }
    };

    Map.prototype.clearCenter = function() {
      this.centerX = null;
      return this.centerY = null;
    };

    Map.prototype.moveToCenter = function(centerX, centerY) {
      var aposition, rposition;
      aposition = this.centerToAbsolutePosition(centerX, centerY);
      rposition = this.toRelativePosition(aposition[0], aposition[1]);
      this.mapLayer.mapMovedTo(aposition[0], aposition[1]);
      return this.data.setDataPosition(rposition.rx, rposition.ry);
    };

    Map.prototype.centerToAbsolutePosition = function(centerX, centerY) {
      var ax, ay;
      ax = -(0.5 + centerX) * (this.fieldSize * this.scale) + this.viewportWidth / 2;
      ay = -(0.5 + centerY) * (this.fieldSize * this.scale) + this.viewportHeight / 2;
      return [ax, ay];
    };

    Map.prototype.toCenterPosition = function() {
      var centerX, centerY;
      centerX = this.data.rx + Math.floor(this.fieldWidth / 2);
      centerY = this.data.ry + Math.floor(this.fieldHeight / 2);
      return [centerX, centerY];
    };

    Map.prototype.toRelativePosition = function(ax, ay) {
      var rx, ry;
      rx = Math.floor(-ax / (this.fieldSize * this.scale));
      ry = Math.floor(-ay / (this.fieldSize * this.scale));
      return {
        rx: rx,
        ry: ry
      };
    };

    Map.prototype.create = function() {
      return this.createFields(0, this.fieldWidth, 0, this.fieldHeight);
    };

    Map.prototype.createFields = function(startX, endX, startY, endY) {
      return this.data.eachField(startX, endX, startY, endY, (function(_this) {
        return function(rx, ry) {
          var data;
          data = _this.data.getField(rx, ry);
          if (data != null) {
            return _this.createField(rx, ry, data);
          }
        };
      })(this));
    };

    Map.prototype.removeFields = function(startX, endX, startY, endY) {
      return this.data.eachField(startX, endX, startY, endY, (function(_this) {
        return function(rx, ry) {
          return _this.fields.remove(function(field) {
            if (field.rx === rx && field.ry === ry) {
              field.clear(_this.mapLayer);
              return true;
            }
          });
        };
      })(this));
    };

    Map.prototype.getFieldAt = function(rx, ry) {
      return this.fields.find(function(field) {
        return field.rx === rx && field.ry === ry;
      });
    };

    Map.prototype.createField = function(rx, ry, data) {
      var already_created, field;
      this.mapLayer.setFieldSize(this.fieldSize);
      already_created = this.fields.any((function(_this) {
        return function(field) {
          return field.rx === rx && field.ry === ry;
        };
      })(this));
      if (!already_created) {
        field = this.mapLayer.setField(rx, ry, data);
        return this.fields.unshift(field);
      }
    };

    Map.prototype.mapMovedTo = function(ax, ay) {
      var rposition;
      this.mapLayer.mapMovedTo(ax, ay);
      rposition = this.toRelativePosition(ax, ay);
      return this.data.mapMovedTo(rposition.rx, rposition.ry, (function(_this) {
        return function(deltaX, deltaY) {
          _this.clearCenter();
          if (deltaX > 0) {
            _this.createFields(_this.fieldWidth - deltaX, _this.fieldWidth, 0, _this.fieldHeight);
            _this.removeFields(0 - deltaX, 0, 0, _this.fieldHeight);
          } else if (deltaX < 0) {
            _this.createFields(0, Math.abs(deltaX), 0, _this.fieldHeight);
            _this.removeFields(_this.fieldWidth, _this.fieldWidth - deltaX, 0, _this.fieldHeight);
          }
          if (deltaY > 0) {
            _this.createFields(0, _this.fieldWidth, _this.fieldHeight - deltaY, _this.fieldHeight);
            return _this.removeFields(0, _this.fieldWidth, 0 - deltaY, 0);
          } else if (deltaY < 0) {
            _this.createFields(0, _this.fieldWidth, 0, Math.abs(deltaY));
            return _this.removeFields(0, _this.fieldWidth, _this.fieldHeight, _this.fieldHeight - deltaY);
          }
        };
      })(this));
    };

    Map.prototype.center = function() {};

    Map.prototype.withinRadius = function(dx, dy, radius, border) {
      if (border == null) {
        border = 1;
      }
      if (dx > radius || dy > radius) {
        return false;
      }
      return Math.pow(dx, 2) + Math.pow(dy, 2) <= Math.pow(radius, 2) + border;
    };

    Map.prototype.restrictToRadius = function(dx, dy, radius, border) {
      if (border == null) {
        border = 1;
      }
      if (dx > radius) {
        return this.restrictToRadius(radius, dy, radius, border);
      }
      if (dy > radius) {
        return this.restrictToRadius(dx, radius, radius, border);
      }
      if (Math.pow(dx, 2) + Math.pow(dy, 2) <= Math.pow(radius, 2) + border) {
        return {
          dx: dx,
          dy: dy
        };
      } else {
        return this.restrictToRadius(dx - 1, dy - 1, radius, border);
      }
    };

    Map.prototype.lowlight_around = function(rx, ry, view_radius) {
      return this.fields.each((function(_this) {
        return function(field) {
          if (!_this.withinRadius(field.rx - rx, field.ry - ry, view_radius, 1)) {
            return field.lowlight();
          }
        };
      })(this));
    };

    Map.prototype.reset_lowlight = function() {
      return this.fields.each((function(_this) {
        return function(field) {
          return field.default_light();
        };
      })(this));
    };

    Map.prototype.zoom = function(newScale) {
      var center;
      center = this.getCenter();
      this.scale = newScale;
      this.mapLayer.scale(newScale);
      this.setDimensions();
      this.moveToCenter(center[0], center[1]);
      this.data.updateData();
      return this.create();
    };

    Map.prototype.clearFields = function() {
      this.fields.each((function(_this) {
        return function(field) {
          return field.clear(_this.mapLayer);
        };
      })(this));
      return this.fields = [];
    };

    return Map;

  })();

}).call(this);
