// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.FieldClickHandler = (function() {
    function FieldClickHandler(layer, listeners, map) {
      this.showBorder = bind(this.showBorder, this);
      this.hideBorder = bind(this.hideBorder, this);
      this.toggleBorder = bind(this.toggleBorder, this);
      this.moveBorder = bind(this.moveBorder, this);
      this.drawBorder = bind(this.drawBorder, this);
      this.toRelativePosition = bind(this.toRelativePosition, this);
      this.onClick = bind(this.onClick, this);
      this.layer = layer;
      this.map = map;
      listeners.each((function(_this) {
        return function(layer) {
          layer.interactive = true;
          layer.on('mousedown', _this.onClick);
          return layer.on('touchstart', _this.onClick);
        };
      })(this));
    }

    FieldClickHandler.prototype.onClick = function(event) {
      var field, position, rposition;
      position = event.data.getLocalPosition(this.layer.parent);
      rposition = this.toRelativePosition(position.x, position.y);
      field = this.map.getFieldAt(rposition.rx, rposition.ry);
      if (field === this.prevField) {
        this.toggleBorder();
      } else {
        this.moveBorder(field);
      }
      return this.prevField = field;
    };

    FieldClickHandler.prototype.toRelativePosition = function(ax, ay) {
      var fieldSize, rx, ry;
      fieldSize = Game.main.stage.map.fieldSize;
      rx = Math.floor(ax / fieldSize);
      ry = Math.floor(ay / fieldSize);
      return {
        rx: rx,
        ry: ry
      };
    };

    FieldClickHandler.prototype.drawBorder = function() {
      var fieldSize;
      this.graphics = new PIXI.Graphics();
      fieldSize = this.map.fieldSize;
      this.graphics.lineStyle(1, 0xAAAAAA, 1);
      this.graphics.drawRect(0, 0, fieldSize, fieldSize);
      this.graphics.endFill();
      this.hideBorder();
      return this.graphics;
    };

    FieldClickHandler.prototype.moveBorder = function(field) {
      var fieldSize;
      fieldSize = this.map.fieldSize;
      this.graphics.position.x = field.rx * fieldSize - 1;
      this.graphics.position.y = field.ry * fieldSize - 1;
      return this.showBorder();
    };

    FieldClickHandler.prototype.toggleBorder = function() {
      return this.graphics.visible = !this.graphics.visible;
    };

    FieldClickHandler.prototype.hideBorder = function() {
      return this.graphics.visible = false;
    };

    FieldClickHandler.prototype.showBorder = function() {
      return this.graphics.visible = true;
    };

    return FieldClickHandler;

  })();

}).call(this);
