// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.Pawn = (function() {
    function Pawn(data) {
      this.snapToGrid = bind(this.snapToGrid, this);
      this.onDragEnd = bind(this.onDragEnd, this);
      this.onDragMove = bind(this.onDragMove, this);
      this.onDragStart = bind(this.onDragStart, this);
      this.initSprite = bind(this.initSprite, this);
      this.id = data.id;
      this.x = data.x;
      this.y = data.y;
      this.type = data.type;
      this.view_radius = data.view_radius;
      this.sprite = this.initSprite();
    }

    Pawn.prototype.initSprite = function() {
      this.sprite = Game.main.assets.getPawnSprite(this.type);
      this.sprite.interactive = true;
      this.sprite.buttonMode = true;
      this.sprite.anchor.set(0.5);
      this.sprite.on('mousedown', this.onDragStart).on('touchstart', this.onDragStart).on('mouseup', this.onDragEnd).on('mouseupoutside', this.onDragEnd).on('touchend', this.onDragEnd).on('touchendoutside', this.onDragEnd).on('mousemove', this.onDragMove).on('touchmove', this.onDragMove);
      return Game.main.assets.pawns.setPawn(this.id, this.sprite);
    };

    Pawn.prototype.onDragStart = function(event) {
      this.dragging = true;
      this.startPosition = {
        x: this.sprite.position.x,
        y: this.sprite.position.y
      };
      Game.main.stage.map.drag_handler.setDragable(false);
      Game.main.stage.map.lowlight_around(this.x, this.y, this.view_radius);
      this.sprite.alpha = 0.7;
      return this.sprite.scale.set(1.5);
    };

    Pawn.prototype.onDragMove = function(event) {
      var dx, dy, fieldSize, newPosition, restrictedPosition;
      if (this.dragging) {
        newPosition = event.data.getLocalPosition(this.sprite.parent);
        fieldSize = Game.main.stage.map.fieldSize;
        dx = Math.abs(this.startPosition.x - newPosition.x);
        dy = Math.abs(this.startPosition.y - newPosition.y);
        restrictedPosition = Game.main.stage.map.restrictToRadius(dx, dy, this.view_radius * fieldSize, fieldSize);
        if (newPosition.x >= this.startPosition.x) {
          this.sprite.position.x = this.startPosition.x + restrictedPosition.dx;
        } else {
          this.sprite.position.x = this.startPosition.x - restrictedPosition.dx;
        }
        if (newPosition.y >= this.startPosition.y) {
          return this.sprite.position.y = this.startPosition.y + restrictedPosition.dy;
        } else {
          return this.sprite.position.y = this.startPosition.y - restrictedPosition.dy;
        }
      }
    };

    Pawn.prototype.onDragEnd = function(event) {
      var newPosition;
      Game.main.stage.map.drag_handler.setDragable(true);
      Game.main.stage.map.reset_lowlight();
      Game.main.stage.map.mapLayer.fieldClickHandler.hideBorder();
      this.sprite.alpha = 1.0;
      this.sprite.scale.set(1);
      this.dragging = false;
      newPosition = this.snapToGrid(this.sprite.position.x, this.sprite.position.y);
      this.sprite.position.set(newPosition.ax, newPosition.ay);
      this.x = newPosition.rx;
      return this.y = newPosition.ry;
    };

    Pawn.prototype.snapToGrid = function(ax, ay) {
      var fieldSize, rx, ry;
      fieldSize = Game.main.stage.map.fieldSize;
      rx = Math.round((ax - (0.5 * fieldSize)) / fieldSize);
      ry = Math.round((ay - (0.5 * fieldSize)) / fieldSize);
      ax = (rx + 0.5) * fieldSize;
      ay = (ry + 0.5) * fieldSize;
      return {
        ax: ax,
        ay: ay,
        rx: rx,
        ry: ry
      };
    };

    return Pawn;

  })();

}).call(this);
