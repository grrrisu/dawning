// Generated by CoffeeScript 1.9.2
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game.MapLayer = (function() {
    function MapLayer(stage, map) {
      this.scale = bind(this.scale, this);
      this.getPosition = bind(this.getPosition, this);
      this.mapMovedTo = bind(this.mapMovedTo, this);
      this.centerSprite = bind(this.centerSprite, this);
      this.setPawn = bind(this.setPawn, this);
      this.setFauna = bind(this.setFauna, this);
      this.setFlora = bind(this.setFlora, this);
      this.setVegetation = bind(this.setVegetation, this);
      this.setField = bind(this.setField, this);
      this.setFieldSize = bind(this.setFieldSize, this);
      this.init = bind(this.init, this);
      this.vegetation_layer = new PIXI.Container();
      this.pawn_layer = new PIXI.Container();
      this.click_layer = new PIXI.Container();
      this.layer = new PIXI.Container();
      this.fieldClickHandler = new Game.FieldClickHandler(this.click_layer, [this.vegetation_layer, this.pawn_layer], map);
      this.layer.addChild(this.vegetation_layer);
      this.layer.addChild(this.click_layer);
      this.layer.addChild(this.pawn_layer);
      stage.addChild(this.layer);
    }

    MapLayer.prototype.init = function() {
      var border;
      border = this.fieldClickHandler.drawBorder();
      return this.click_layer.addChild(border);
    };

    MapLayer.prototype.setFieldSize = function(fieldSize) {
      return this.fieldSize = fieldSize;
    };

    MapLayer.prototype.setField = function(x, y, data) {
      var field, vegetationSprite;
      field = new Game.Field(x, y);
      vegetationSprite = this.setVegetation(x, y, data.vegetation, field);
      if (data.flora != null) {
        this.setFlora(data.flora, vegetationSprite, field);
      }
      if (data.fauna != null) {
        this.setFauna(data.fauna, vegetationSprite, field);
      }
      if (data.pawn != null) {
        this.setPawn(data.pawn, x, y, this.pawn_layer, field);
      }
      return field;
    };

    MapLayer.prototype.setVegetation = function(x, y, vegetation, field) {
      var sprite;
      sprite = Game.main.assets.getVegetationSprite(vegetation.type);
      sprite.position.x = x * this.fieldSize;
      sprite.position.y = y * this.fieldSize;
      this.vegetation_layer.addChild(sprite);
      field.setVegetationSprite(sprite);
      return sprite;
    };

    MapLayer.prototype.setFlora = function(data, parent, field) {
      var sprite;
      sprite = Game.main.assets.getFloraSprite(data.type);
      field.setFloraSprite(sprite);
      this.centerSprite(sprite);
      return parent.addChild(sprite);
    };

    MapLayer.prototype.setFauna = function(data, parent, field) {
      var sprite;
      sprite = Game.main.assets.getFaunaSprite(data.type);
      field.setFaunaSprite(sprite);
      this.centerSprite(sprite);
      return parent.addChild(sprite);
    };

    MapLayer.prototype.setPawn = function(data, x, y, parent, field) {
      var sprite;
      sprite = Game.main.assets.getPawnSprite(data.type, data.id);
      field.setPawnSprite(sprite);
      sprite.position.x = (x + 0.5) * this.fieldSize;
      sprite.position.y = (y + 0.5) * this.fieldSize;
      return parent.addChild(sprite);
    };

    MapLayer.prototype.centerSprite = function(sprite) {
      sprite.position.x = (this.fieldSize - sprite.width) / 2;
      return sprite.position.y = (this.fieldSize - sprite.height) / 2;
    };

    MapLayer.prototype.mapMovedTo = function(ax, ay) {
      this.ax = ax;
      this.ay = ay;
      this.layer.position.x = ax;
      return this.layer.position.y = ay;
    };

    MapLayer.prototype.getPosition = function() {
      return this.layer.position;
    };

    MapLayer.prototype.scale = function(n) {
      this.layer.scale.x = n;
      return this.layer.scale.y = n;
    };

    return MapLayer;

  })();

}).call(this);
